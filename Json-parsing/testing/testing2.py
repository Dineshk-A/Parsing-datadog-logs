import re

def add_double_backslashes(grok_rule):
    # Replace all single backslashes with double backslashes
    grok_rule = grok_rule.replace('\\', '\\\\')

    # Add backslash before every { except for %{DATA...}
    # This regex looks for `{` that is NOT preceded by `%`
    grok_rule = re.sub(r'(?<!%)\{', '\\\\{', grok_rule)

    return grok_rule

# Example output from the first script
grok_rule = r"""
{\"clientCode\": \"%{DATA:Case.clientcode}\", \"clientType\": \"%{DATA:Case.clienttype}\", \"requestKey\": \"%{DATA:Case.requestkey}\", \"caseType\": \"%{DATA:Case.casetype}\", \"subId\": \"%{DATA:Case.subid}\", \"keysAvailable\": \"%{DATA:Case.keysavailable}\", \"keysLocation\": \"%{DATA:Case.keyslocation}\", \"isReleaseRequired\": \"%{DATA:Case.isreleaserequired}\", \"storeVehicle\": \"%{DATA:Case.storevehicle}\", \"comments\": \"%{DATA:Case.comments}\", \"FirstName\": \"%{DATA:Case.caller.firstname}\", \"LastName\": \"%{DATA:Case.caller.lastname}\", \"PhoneNumber\": \"%{DATA:Case.caller.phonenumber}\", \"EmployeeId\": \"%{DATA:Case.caller.employeeid}\", \"Email\": \"%{DATA:Case.caller.email}\", \"Extension\": \"%{DATA:Case.caller.extension}\", \"AssignmentType\": \"%{DATA:Case.claim.assignmenttype}\", \"ClaimType\": \"%{DATA:Case.claim.claimtype}\", \"ClaimNumber\": \"%{DATA:Case.claim.claimnumber}\", \"CoverageCode\": \"%{DATA:Case.claim.coveragecode}\", \"DateOfLoss\": \"%{DATA:Case.claim.dateofloss}\", \"PolicyState\": \"%{DATA:Case.claim.policystate}\", \"LossReportNumber\": \"%{DATA:Case.claim.lossreportnumber}\", 
\"PolicyNumber\": \"%{DATA:Case.claim.policynumber}\", \"TypeOfLoss\": \"%{DATA:Case.claim.typeofloss}\", \"CustomerPay\": \"%{DATA:Case.claim.customerpay}\", \"CustomerCoverageType\": \"%{DATA:Case.claim.customercoveragetype}\", \"CustomerCoverageValue\": \"%{DATA:Case.claim.customercoveragevalue}\", \"CoveragePaymentComment\": \"%{DATA:Case.claim.coveragepaymentcomment}\", \"FirstName\": \"%{DATA:Case.customer.firstname}\", \"LastName\": \"%{DATA:Case.customer.lastname}\", \"Email\": \"%{DATA:Case.customer.email}\", \"PhoneNumber1\": \"%{DATA:Case.customer.phonenumber1}\", \"PhoneNumber2\": \"%{DATA:Case.customer.phonenumber2}\", \"MobilePhoneNumber\": \"%{DATA:Case.customer.mobilephonenumber}\", \"TextAllowed\": \"%{DATA:Case.customer.textallowed}\", \"CustomerWithVehicle\": \"%{DATA:Case.customer.customerwithvehicle}\", \"PersonInPossession\": \"%{DATA:Case.customer.personinpossession}\", \"PickupStartTime\": \"%{DATA:Case.customer.pickupstarttime}\", \"PickupEndTime\": \"%{DATA:Case.customer.pickupendtime}\", \"RequestAlternateTransportation\": \"%{DATA:Case.customer.requestalternatetransportation}\", \"Year\": \"%{DATA:Case.vehicleInformation.year}\", \"Make\": \"%{DATA:Case.vehicleInformation.make}\", \"Model\": \"%{DATA:Case.vehicleInformation.model}\", \"Vin\": \"%{DATA:Case.vehicleInformation.vin}\", \"Color\": \"%{DATA:Case.vehicleInformation.color}\", \"Class\": \"%{DATA:Case.vehicleInformation.class}\", \"LicensePlate\": \"%{DATA:Case.vehicleInformation.licenseplate}\", \"DriveTrain\": \"%{DATA:Case.vehicleInformation.drivetrain}\", \"PlateState\": \"%{DATA:Case.vehicleInformation.platestate}\", \"FuelType\": \"%{DATA:Case.vehicleInformation.fueltype}\", \"frontEnd\": 
\"%{DATA:Case.damageInformation.frontend}\", \"rearEnd\": \"%{DATA:Case.damageInformation.rearend}\", \"driverSide\": \"%{DATA:Case.damageInformation.driverside}\", \"passengerSide\": \"%{DATA:Case.damageInformation.passengerside}\", \"flatTires\": \"%{DATA:Case.damageInformation.flattires}\", \"noTires\": \"%{DATA:Case.damageInformation.notires}\", \"noKeys\": \"%{DATA:Case.damageInformation.nokeys}\", \"steeringColumn\": \"%{DATA:Case.damageInformation.steeringcolumn}\", \"underCarriage\": \"%{DATA:Case.damageInformation.undercarriage}\", \"unknown\": \"%{DATA:Case.damageInformation.unknown}\", \"flood\": \"%{DATA:Case.damageInformation.flood}\", \"flipped\": \"%{DATA:Case.damageInformation.flipped}\", \"leakingFluids\": \"%{DATA:Case.damageInformation.leakingfluids}\", \"willWheelsRoll\": \"%{DATA:Case.damageInformation.willwheelsroll}\", \"airBagDeployed\": \"%{DATA:Case.damageInformation.airbagdeployed}\", \"other\": \"%{DATA:Case.damageInformation.other}\", \"address\": \"%{DATA:Case.locationInformation.pickupLocation.address}\", \"city\": \"%{DATA:Case.locationInformation.pickupLocation.city}\", \"state\": \"%{DATA:Case.locationInformation.pickupLocation.state}\", \"zip\": \"%{DATA:Case.locationInformation.pickupLocation.zip}\", \"country\": \"%{DATA:Case.locationInformation.pickupLocation.country}\", \"name\": \"%{DATA:Case.locationInformation.pickupLocation.name}\", \"phoneNumber\": \"%{DATA:Case.locationInformation.pickupLocation.phonenumber}\", \"type\": \"%{DATA:Case.locationInformation.pickupLocation.type}\", \"latitude\": \"%{DATA:Case.locationInformation.pickupLocation.latitude}\", \"longitude\": \"%{DATA:Case.locationInformation.pickupLocation.longitude}\", \"email\": \"%{DATA:Case.locationInformation.pickupLocation.email}\", \"within20Miles\": \"%{DATA:Case.locationInformation.pickupLocation.within20miles}\", \"contactName\": \"%{DATA:Case.locationInformation.pickupLocation.contactname}\", \"category\": \"%{DATA:Case.locationInformation.pickupLocation.category}\"}
"""

# Apply the transformation
processed_grok_rule = add_double_backslashes(grok_rule)
print(processed_grok_rule)
